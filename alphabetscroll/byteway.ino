
const int strclock=11;
const int mainclock=10;
const int datainput=12;//try to make a pointer array or some sort of array of all the elements to access easily
byte A[] = {B00011000,B00111100,B01100110,B01100110,B01111110,B01111110,B01100110,B01100110};
byte B[] = {B01111100,B01100110,B01100110,B01111100,B01111110,B01100110,B01100110,B01111100};
byte C[] = {B00111110,B01111110,B01100000,B01100000,B01100000,B01100000,B01111110,B00111110};
byte D[] = {B01111000,B01111100,B01100110,B01100110,B01100110,B01100110,B01111100,B01111000};
byte E[] = {B01111110,B01111110,B01100000,B01111110,B01111110,B01100000,B01111110,B01111110};
byte F[] = {B01111110,B01111110,B01100000,B01111100,B01111100,B01100000,B01100000,B01100000};
byte G[] = {B00111000,B01111100,B01100100,B01100000,B01101110,B01100100,B01111100,B00111000};
byte H[] = {B01100110,B01100110,B01100110,B01111110,B01111110,B01100110,B01100110,B01100110};
byte I[] = {B01111110,B01111110,B00011000,B00011000,B00011000,B00011000,B01111110,B01111110};
byte J[] = {B01111110,B01111110,B00011000,B00011000,B00011000,B00011000,B01111000,B01110000};
byte K[] = {B01100110,B01101100,B01111000,B01110000,B01110000,B01111000,B01101100,B01100110};
byte L[] = {B01100000,B01100000,B01100000,B01100000,B01100000,B01100000,B01111110,B01111110};
byte M[] = {B01000010,B01100110,B01111110,B01011010,B01000010,B01000010,B01000010,B01000010};
byte N[] = {B01000110,B01100110,B01100110,B01110110,B01111110,B01101110,B01100110,B01100110};
byte O[] = {B00111100,B01111110,B01100110,B01100110,B01100110,B01100110,B01111110,B00111100};
byte P[] = {B01111000,B01111100,B01100110,B01100110,B01111100,B01111000,B01100000,B01100000};
byte Q[] = {B00111100,B01000010,B01000010,B01000010,B01000010,B01001010,B00111100,B00000010};
byte R[] = {B01111100,B01100110,B01100110,B01101100,B01111000,B01111000,B01101100,B01100110};
byte S[] = {B00111100,B01111110,B01100000,B01111100,B00111110,B00000110,B01111110,B00111100};//{B00111000,B01111100,B01100000,B00110000,B00011000,B00001100,B00111100,B01111000};
byte T[] = {B01111110,B01111110,B00011000,B00011000,B00011000,B00011000,B00011000,B00011000};
byte U[] = {B01100110,B01100110,B01100110,B01100110,B01100110,B01100110,B01111110,B00111100};
byte V[] = {B01100110,B01100110,B01100110,B01100110,B01100110,B01100110,B00111100,B00011000};
byte W[] = {B01000010,B01000010,B01000010,B01000010,B01000010,B01011010,B01011010,B00100100};
byte X[] = {B01100110,B01100110,B01100110,B00111100,B00011000,B00111100,B01100110,B01100110};
byte Y[] = {B01100110,B01100110,B01100110,B01111110,B00111100,B00011000,B00011000,B00011000};
byte Z[] = {B01111110,B01111110,B00000110,B00001100,B00011000,B00110000,B01111110,B01111110};


byte Zero[]   = {B00111100,B01111110,B01100110,B01100110,B01100110,B01100110,B01111110,B00111100}; 
byte One[]    = {B00011000,B00111000,B01111000,B00011000,B00011000,B00011000,B01111110,B01111110}; 
byte Two[]    = {B00111100,B01111110,B01000110,B00001100,B00011000,B00110000,B01111110,B01111110};
byte Three[]  = {B01111100,B01111110,B00000110,B00111110,B00111110,B00000110,B01111110,B01111100};
byte Four[]   = {B00001100,B00011100,B00111100,B01101100,B01111110,B01111110,B00001100,B00001100};
byte Five[]   = {B01111110,B01111110,B01100000,B01111100,B00111110,B00000110,B01111110,B01111100};
byte Six[]    = {B00001100,B00011000,B00110000,B01111100,B01111110,B01100110,B01100110,B00111100};
byte Seven[]  = {B01111110,B01111110,B00000110,B00000110,B00001100,B00011000,B00110000,B01100000}; 
byte Eight[]  = {B00111100,B01100110,B01100110,B00111100,B01111110,B01100110,B01100110,B00111100}; 
byte Nine[]   = {B00111100,B01100110,B01100110,B01111110,B00111110,B00001100,B00011000,B00110000}; 



void setup() {
  // put your setup code here, to run once:

  pinMode(strclock,OUTPUT);
  pinMode(mainclock,OUTPUT);
  pinMode(datainput,OUTPUT);

}
void input(int datainput,int mainclock,byte a){
  
  
  for(int i=0;i<8;i++){
    if(((~a >> i) & 0x01)==1){
      digitalWrite(datainput,HIGH);
      digitalWrite(mainclock,HIGH);
      
      digitalWrite(mainclock,LOW);
      
      digitalWrite(datainput,LOW);
      
    }
    else if(((~a >> i) & 0x01)==0){
      digitalWrite(datainput,LOW);
      digitalWrite(mainclock,HIGH);
      
      digitalWrite(mainclock,LOW);
      
    }
  }

}
void strclockpulse(){
  digitalWrite(strclock,HIGH);

  digitalWrite(strclock,LOW);


}
void printit(byte array[]){
  for(int j=7;j>0;j--){
    for(int i=0;i<8;i++){
    input(datainput,mainclock,array[i]>>j);
    shiftOut(datainput,mainclock,MSBFIRST,128>>i);

    strclockpulse();
    delay(10);
  }
  delay(5);
  }
    for(int j=0;j<8;j++){
    for(int i=0;i<8;i++){
    input(datainput,mainclock,array[i]<<j);
    shiftOut(datainput,mainclock,MSBFIRST,128>>i);

    strclockpulse();
    delay(10);
  }
  delay(5);
  }
  
}

void loop() {
  printit(A);
  printit(B);
  printit(C);
  printit(D);
  printit(E);
  printit(F);
  printit(G);
  printit(H);
  printit(I);
  printit(J);
  printit(K);
  printit(L);
  printit(M);
  printit(N);
  printit(O);
  printit(P);
  printit(Q);
  printit(R);
  printit(S);
  printit(T);
  printit(U);
  printit(V);
  printit(W);
  printit(X);
  printit(Y);
  printit(Z);
  
}

 
